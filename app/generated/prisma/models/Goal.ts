
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Goal` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Goal
 * 
 */
export type GoalModel = runtime.Types.Result.DefaultSelection<Prisma.$GoalPayload>

export type AggregateGoal = {
  _count: GoalCountAggregateOutputType | null
  _avg: GoalAvgAggregateOutputType | null
  _sum: GoalSumAggregateOutputType | null
  _min: GoalMinAggregateOutputType | null
  _max: GoalMaxAggregateOutputType | null
}

export type GoalAvgAggregateOutputType = {
  id: number | null
  weight: number | null
}

export type GoalSumAggregateOutputType = {
  id: number | null
  weight: number | null
}

export type GoalMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  weight: number | null
}

export type GoalMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  weight: number | null
}

export type GoalCountAggregateOutputType = {
  id: number
  createdAt: number
  weight: number
  _all: number
}


export type GoalAvgAggregateInputType = {
  id?: true
  weight?: true
}

export type GoalSumAggregateInputType = {
  id?: true
  weight?: true
}

export type GoalMinAggregateInputType = {
  id?: true
  createdAt?: true
  weight?: true
}

export type GoalMaxAggregateInputType = {
  id?: true
  createdAt?: true
  weight?: true
}

export type GoalCountAggregateInputType = {
  id?: true
  createdAt?: true
  weight?: true
  _all?: true
}

export type GoalAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Goal to aggregate.
   */
  where?: Prisma.GoalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Goals to fetch.
   */
  orderBy?: Prisma.GoalOrderByWithRelationInput | Prisma.GoalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GoalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Goals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Goals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Goals
  **/
  _count?: true | GoalCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GoalAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GoalSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GoalMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GoalMaxAggregateInputType
}

export type GetGoalAggregateType<T extends GoalAggregateArgs> = {
      [P in keyof T & keyof AggregateGoal]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGoal[P]>
    : Prisma.GetScalarType<T[P], AggregateGoal[P]>
}




export type GoalGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GoalWhereInput
  orderBy?: Prisma.GoalOrderByWithAggregationInput | Prisma.GoalOrderByWithAggregationInput[]
  by: Prisma.GoalScalarFieldEnum[] | Prisma.GoalScalarFieldEnum
  having?: Prisma.GoalScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GoalCountAggregateInputType | true
  _avg?: GoalAvgAggregateInputType
  _sum?: GoalSumAggregateInputType
  _min?: GoalMinAggregateInputType
  _max?: GoalMaxAggregateInputType
}

export type GoalGroupByOutputType = {
  id: number
  createdAt: Date
  weight: number
  _count: GoalCountAggregateOutputType | null
  _avg: GoalAvgAggregateOutputType | null
  _sum: GoalSumAggregateOutputType | null
  _min: GoalMinAggregateOutputType | null
  _max: GoalMaxAggregateOutputType | null
}

type GetGoalGroupByPayload<T extends GoalGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GoalGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GoalGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GoalGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GoalGroupByOutputType[P]>
      }
    >
  > 



export type GoalWhereInput = {
  AND?: Prisma.GoalWhereInput | Prisma.GoalWhereInput[]
  OR?: Prisma.GoalWhereInput[]
  NOT?: Prisma.GoalWhereInput | Prisma.GoalWhereInput[]
  id?: Prisma.IntFilter<"Goal"> | number
  createdAt?: Prisma.DateTimeFilter<"Goal"> | Date | string
  weight?: Prisma.IntFilter<"Goal"> | number
}

export type GoalOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type GoalWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.GoalWhereInput | Prisma.GoalWhereInput[]
  OR?: Prisma.GoalWhereInput[]
  NOT?: Prisma.GoalWhereInput | Prisma.GoalWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"Goal"> | Date | string
  weight?: Prisma.IntFilter<"Goal"> | number
}, "id">

export type GoalOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  _count?: Prisma.GoalCountOrderByAggregateInput
  _avg?: Prisma.GoalAvgOrderByAggregateInput
  _max?: Prisma.GoalMaxOrderByAggregateInput
  _min?: Prisma.GoalMinOrderByAggregateInput
  _sum?: Prisma.GoalSumOrderByAggregateInput
}

export type GoalScalarWhereWithAggregatesInput = {
  AND?: Prisma.GoalScalarWhereWithAggregatesInput | Prisma.GoalScalarWhereWithAggregatesInput[]
  OR?: Prisma.GoalScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GoalScalarWhereWithAggregatesInput | Prisma.GoalScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Goal"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Goal"> | Date | string
  weight?: Prisma.IntWithAggregatesFilter<"Goal"> | number
}

export type GoalCreateInput = {
  createdAt?: Date | string
  weight: number
}

export type GoalUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  weight: number
}

export type GoalUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
}

export type GoalUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
}

export type GoalCreateManyInput = {
  id?: number
  createdAt?: Date | string
  weight: number
}

export type GoalUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
}

export type GoalUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
}

export type GoalCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type GoalAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type GoalMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type GoalMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type GoalSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}



export type GoalSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  weight?: boolean
}, ExtArgs["result"]["goal"]>

export type GoalSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  weight?: boolean
}, ExtArgs["result"]["goal"]>

export type GoalSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  weight?: boolean
}, ExtArgs["result"]["goal"]>

export type GoalSelectScalar = {
  id?: boolean
  createdAt?: boolean
  weight?: boolean
}

export type GoalOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "weight", ExtArgs["result"]["goal"]>

export type $GoalPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Goal"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    weight: number
  }, ExtArgs["result"]["goal"]>
  composites: {}
}

export type GoalGetPayload<S extends boolean | null | undefined | GoalDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GoalPayload, S>

export type GoalCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GoalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GoalCountAggregateInputType | true
  }

export interface GoalDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Goal'], meta: { name: 'Goal' } }
  /**
   * Find zero or one Goal that matches the filter.
   * @param {GoalFindUniqueArgs} args - Arguments to find a Goal
   * @example
   * // Get one Goal
   * const goal = await prisma.goal.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GoalFindUniqueArgs>(args: Prisma.SelectSubset<T, GoalFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GoalClient<runtime.Types.Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Goal that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GoalFindUniqueOrThrowArgs} args - Arguments to find a Goal
   * @example
   * // Get one Goal
   * const goal = await prisma.goal.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GoalFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GoalFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GoalClient<runtime.Types.Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Goal that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GoalFindFirstArgs} args - Arguments to find a Goal
   * @example
   * // Get one Goal
   * const goal = await prisma.goal.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GoalFindFirstArgs>(args?: Prisma.SelectSubset<T, GoalFindFirstArgs<ExtArgs>>): Prisma.Prisma__GoalClient<runtime.Types.Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Goal that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GoalFindFirstOrThrowArgs} args - Arguments to find a Goal
   * @example
   * // Get one Goal
   * const goal = await prisma.goal.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GoalFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GoalFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GoalClient<runtime.Types.Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Goals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GoalFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Goals
   * const goals = await prisma.goal.findMany()
   * 
   * // Get first 10 Goals
   * const goals = await prisma.goal.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const goalWithIdOnly = await prisma.goal.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GoalFindManyArgs>(args?: Prisma.SelectSubset<T, GoalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Goal.
   * @param {GoalCreateArgs} args - Arguments to create a Goal.
   * @example
   * // Create one Goal
   * const Goal = await prisma.goal.create({
   *   data: {
   *     // ... data to create a Goal
   *   }
   * })
   * 
   */
  create<T extends GoalCreateArgs>(args: Prisma.SelectSubset<T, GoalCreateArgs<ExtArgs>>): Prisma.Prisma__GoalClient<runtime.Types.Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Goals.
   * @param {GoalCreateManyArgs} args - Arguments to create many Goals.
   * @example
   * // Create many Goals
   * const goal = await prisma.goal.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GoalCreateManyArgs>(args?: Prisma.SelectSubset<T, GoalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Goals and returns the data saved in the database.
   * @param {GoalCreateManyAndReturnArgs} args - Arguments to create many Goals.
   * @example
   * // Create many Goals
   * const goal = await prisma.goal.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Goals and only return the `id`
   * const goalWithIdOnly = await prisma.goal.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GoalCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GoalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Goal.
   * @param {GoalDeleteArgs} args - Arguments to delete one Goal.
   * @example
   * // Delete one Goal
   * const Goal = await prisma.goal.delete({
   *   where: {
   *     // ... filter to delete one Goal
   *   }
   * })
   * 
   */
  delete<T extends GoalDeleteArgs>(args: Prisma.SelectSubset<T, GoalDeleteArgs<ExtArgs>>): Prisma.Prisma__GoalClient<runtime.Types.Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Goal.
   * @param {GoalUpdateArgs} args - Arguments to update one Goal.
   * @example
   * // Update one Goal
   * const goal = await prisma.goal.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GoalUpdateArgs>(args: Prisma.SelectSubset<T, GoalUpdateArgs<ExtArgs>>): Prisma.Prisma__GoalClient<runtime.Types.Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Goals.
   * @param {GoalDeleteManyArgs} args - Arguments to filter Goals to delete.
   * @example
   * // Delete a few Goals
   * const { count } = await prisma.goal.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GoalDeleteManyArgs>(args?: Prisma.SelectSubset<T, GoalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Goals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GoalUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Goals
   * const goal = await prisma.goal.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GoalUpdateManyArgs>(args: Prisma.SelectSubset<T, GoalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Goals and returns the data updated in the database.
   * @param {GoalUpdateManyAndReturnArgs} args - Arguments to update many Goals.
   * @example
   * // Update many Goals
   * const goal = await prisma.goal.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Goals and only return the `id`
   * const goalWithIdOnly = await prisma.goal.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GoalUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GoalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Goal.
   * @param {GoalUpsertArgs} args - Arguments to update or create a Goal.
   * @example
   * // Update or create a Goal
   * const goal = await prisma.goal.upsert({
   *   create: {
   *     // ... data to create a Goal
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Goal we want to update
   *   }
   * })
   */
  upsert<T extends GoalUpsertArgs>(args: Prisma.SelectSubset<T, GoalUpsertArgs<ExtArgs>>): Prisma.Prisma__GoalClient<runtime.Types.Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Goals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GoalCountArgs} args - Arguments to filter Goals to count.
   * @example
   * // Count the number of Goals
   * const count = await prisma.goal.count({
   *   where: {
   *     // ... the filter for the Goals we want to count
   *   }
   * })
  **/
  count<T extends GoalCountArgs>(
    args?: Prisma.Subset<T, GoalCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GoalCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Goal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GoalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GoalAggregateArgs>(args: Prisma.Subset<T, GoalAggregateArgs>): Prisma.PrismaPromise<GetGoalAggregateType<T>>

  /**
   * Group by Goal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GoalGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GoalGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GoalGroupByArgs['orderBy'] }
      : { orderBy?: GoalGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GoalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Goal model
 */
readonly fields: GoalFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Goal.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GoalClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Goal model
 */
export interface GoalFieldRefs {
  readonly id: Prisma.FieldRef<"Goal", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Goal", 'DateTime'>
  readonly weight: Prisma.FieldRef<"Goal", 'Int'>
}
    

// Custom InputTypes
/**
 * Goal findUnique
 */
export type GoalFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Goal
   */
  select?: Prisma.GoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Goal
   */
  omit?: Prisma.GoalOmit<ExtArgs> | null
  /**
   * Filter, which Goal to fetch.
   */
  where: Prisma.GoalWhereUniqueInput
}

/**
 * Goal findUniqueOrThrow
 */
export type GoalFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Goal
   */
  select?: Prisma.GoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Goal
   */
  omit?: Prisma.GoalOmit<ExtArgs> | null
  /**
   * Filter, which Goal to fetch.
   */
  where: Prisma.GoalWhereUniqueInput
}

/**
 * Goal findFirst
 */
export type GoalFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Goal
   */
  select?: Prisma.GoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Goal
   */
  omit?: Prisma.GoalOmit<ExtArgs> | null
  /**
   * Filter, which Goal to fetch.
   */
  where?: Prisma.GoalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Goals to fetch.
   */
  orderBy?: Prisma.GoalOrderByWithRelationInput | Prisma.GoalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Goals.
   */
  cursor?: Prisma.GoalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Goals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Goals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Goals.
   */
  distinct?: Prisma.GoalScalarFieldEnum | Prisma.GoalScalarFieldEnum[]
}

/**
 * Goal findFirstOrThrow
 */
export type GoalFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Goal
   */
  select?: Prisma.GoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Goal
   */
  omit?: Prisma.GoalOmit<ExtArgs> | null
  /**
   * Filter, which Goal to fetch.
   */
  where?: Prisma.GoalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Goals to fetch.
   */
  orderBy?: Prisma.GoalOrderByWithRelationInput | Prisma.GoalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Goals.
   */
  cursor?: Prisma.GoalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Goals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Goals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Goals.
   */
  distinct?: Prisma.GoalScalarFieldEnum | Prisma.GoalScalarFieldEnum[]
}

/**
 * Goal findMany
 */
export type GoalFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Goal
   */
  select?: Prisma.GoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Goal
   */
  omit?: Prisma.GoalOmit<ExtArgs> | null
  /**
   * Filter, which Goals to fetch.
   */
  where?: Prisma.GoalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Goals to fetch.
   */
  orderBy?: Prisma.GoalOrderByWithRelationInput | Prisma.GoalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Goals.
   */
  cursor?: Prisma.GoalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Goals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Goals.
   */
  skip?: number
  distinct?: Prisma.GoalScalarFieldEnum | Prisma.GoalScalarFieldEnum[]
}

/**
 * Goal create
 */
export type GoalCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Goal
   */
  select?: Prisma.GoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Goal
   */
  omit?: Prisma.GoalOmit<ExtArgs> | null
  /**
   * The data needed to create a Goal.
   */
  data: Prisma.XOR<Prisma.GoalCreateInput, Prisma.GoalUncheckedCreateInput>
}

/**
 * Goal createMany
 */
export type GoalCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Goals.
   */
  data: Prisma.GoalCreateManyInput | Prisma.GoalCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Goal createManyAndReturn
 */
export type GoalCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Goal
   */
  select?: Prisma.GoalSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Goal
   */
  omit?: Prisma.GoalOmit<ExtArgs> | null
  /**
   * The data used to create many Goals.
   */
  data: Prisma.GoalCreateManyInput | Prisma.GoalCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Goal update
 */
export type GoalUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Goal
   */
  select?: Prisma.GoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Goal
   */
  omit?: Prisma.GoalOmit<ExtArgs> | null
  /**
   * The data needed to update a Goal.
   */
  data: Prisma.XOR<Prisma.GoalUpdateInput, Prisma.GoalUncheckedUpdateInput>
  /**
   * Choose, which Goal to update.
   */
  where: Prisma.GoalWhereUniqueInput
}

/**
 * Goal updateMany
 */
export type GoalUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Goals.
   */
  data: Prisma.XOR<Prisma.GoalUpdateManyMutationInput, Prisma.GoalUncheckedUpdateManyInput>
  /**
   * Filter which Goals to update
   */
  where?: Prisma.GoalWhereInput
  /**
   * Limit how many Goals to update.
   */
  limit?: number
}

/**
 * Goal updateManyAndReturn
 */
export type GoalUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Goal
   */
  select?: Prisma.GoalSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Goal
   */
  omit?: Prisma.GoalOmit<ExtArgs> | null
  /**
   * The data used to update Goals.
   */
  data: Prisma.XOR<Prisma.GoalUpdateManyMutationInput, Prisma.GoalUncheckedUpdateManyInput>
  /**
   * Filter which Goals to update
   */
  where?: Prisma.GoalWhereInput
  /**
   * Limit how many Goals to update.
   */
  limit?: number
}

/**
 * Goal upsert
 */
export type GoalUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Goal
   */
  select?: Prisma.GoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Goal
   */
  omit?: Prisma.GoalOmit<ExtArgs> | null
  /**
   * The filter to search for the Goal to update in case it exists.
   */
  where: Prisma.GoalWhereUniqueInput
  /**
   * In case the Goal found by the `where` argument doesn't exist, create a new Goal with this data.
   */
  create: Prisma.XOR<Prisma.GoalCreateInput, Prisma.GoalUncheckedCreateInput>
  /**
   * In case the Goal was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GoalUpdateInput, Prisma.GoalUncheckedUpdateInput>
}

/**
 * Goal delete
 */
export type GoalDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Goal
   */
  select?: Prisma.GoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Goal
   */
  omit?: Prisma.GoalOmit<ExtArgs> | null
  /**
   * Filter which Goal to delete.
   */
  where: Prisma.GoalWhereUniqueInput
}

/**
 * Goal deleteMany
 */
export type GoalDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Goals to delete
   */
  where?: Prisma.GoalWhereInput
  /**
   * Limit how many Goals to delete.
   */
  limit?: number
}

/**
 * Goal without action
 */
export type GoalDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Goal
   */
  select?: Prisma.GoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Goal
   */
  omit?: Prisma.GoalOmit<ExtArgs> | null
}
