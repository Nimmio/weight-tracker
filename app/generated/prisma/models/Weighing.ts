
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Weighing` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Weighing
 * 
 */
export type WeighingModel = runtime.Types.Result.DefaultSelection<Prisma.$WeighingPayload>

export type AggregateWeighing = {
  _count: WeighingCountAggregateOutputType | null
  _avg: WeighingAvgAggregateOutputType | null
  _sum: WeighingSumAggregateOutputType | null
  _min: WeighingMinAggregateOutputType | null
  _max: WeighingMaxAggregateOutputType | null
}

export type WeighingAvgAggregateOutputType = {
  id: number | null
  weight: number | null
}

export type WeighingSumAggregateOutputType = {
  id: number | null
  weight: number | null
}

export type WeighingMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  date: Date | null
  weight: number | null
  notes: string | null
}

export type WeighingMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  date: Date | null
  weight: number | null
  notes: string | null
}

export type WeighingCountAggregateOutputType = {
  id: number
  createdAt: number
  date: number
  weight: number
  notes: number
  _all: number
}


export type WeighingAvgAggregateInputType = {
  id?: true
  weight?: true
}

export type WeighingSumAggregateInputType = {
  id?: true
  weight?: true
}

export type WeighingMinAggregateInputType = {
  id?: true
  createdAt?: true
  date?: true
  weight?: true
  notes?: true
}

export type WeighingMaxAggregateInputType = {
  id?: true
  createdAt?: true
  date?: true
  weight?: true
  notes?: true
}

export type WeighingCountAggregateInputType = {
  id?: true
  createdAt?: true
  date?: true
  weight?: true
  notes?: true
  _all?: true
}

export type WeighingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Weighing to aggregate.
   */
  where?: Prisma.WeighingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Weighings to fetch.
   */
  orderBy?: Prisma.WeighingOrderByWithRelationInput | Prisma.WeighingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WeighingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Weighings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Weighings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Weighings
  **/
  _count?: true | WeighingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WeighingAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WeighingSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WeighingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WeighingMaxAggregateInputType
}

export type GetWeighingAggregateType<T extends WeighingAggregateArgs> = {
      [P in keyof T & keyof AggregateWeighing]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWeighing[P]>
    : Prisma.GetScalarType<T[P], AggregateWeighing[P]>
}




export type WeighingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WeighingWhereInput
  orderBy?: Prisma.WeighingOrderByWithAggregationInput | Prisma.WeighingOrderByWithAggregationInput[]
  by: Prisma.WeighingScalarFieldEnum[] | Prisma.WeighingScalarFieldEnum
  having?: Prisma.WeighingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WeighingCountAggregateInputType | true
  _avg?: WeighingAvgAggregateInputType
  _sum?: WeighingSumAggregateInputType
  _min?: WeighingMinAggregateInputType
  _max?: WeighingMaxAggregateInputType
}

export type WeighingGroupByOutputType = {
  id: number
  createdAt: Date
  date: Date
  weight: number
  notes: string | null
  _count: WeighingCountAggregateOutputType | null
  _avg: WeighingAvgAggregateOutputType | null
  _sum: WeighingSumAggregateOutputType | null
  _min: WeighingMinAggregateOutputType | null
  _max: WeighingMaxAggregateOutputType | null
}

type GetWeighingGroupByPayload<T extends WeighingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WeighingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WeighingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WeighingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WeighingGroupByOutputType[P]>
      }
    >
  > 



export type WeighingWhereInput = {
  AND?: Prisma.WeighingWhereInput | Prisma.WeighingWhereInput[]
  OR?: Prisma.WeighingWhereInput[]
  NOT?: Prisma.WeighingWhereInput | Prisma.WeighingWhereInput[]
  id?: Prisma.IntFilter<"Weighing"> | number
  createdAt?: Prisma.DateTimeFilter<"Weighing"> | Date | string
  date?: Prisma.DateTimeFilter<"Weighing"> | Date | string
  weight?: Prisma.IntFilter<"Weighing"> | number
  notes?: Prisma.StringNullableFilter<"Weighing"> | string | null
}

export type WeighingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  date?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type WeighingWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.WeighingWhereInput | Prisma.WeighingWhereInput[]
  OR?: Prisma.WeighingWhereInput[]
  NOT?: Prisma.WeighingWhereInput | Prisma.WeighingWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"Weighing"> | Date | string
  date?: Prisma.DateTimeFilter<"Weighing"> | Date | string
  weight?: Prisma.IntFilter<"Weighing"> | number
  notes?: Prisma.StringNullableFilter<"Weighing"> | string | null
}, "id">

export type WeighingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  date?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.WeighingCountOrderByAggregateInput
  _avg?: Prisma.WeighingAvgOrderByAggregateInput
  _max?: Prisma.WeighingMaxOrderByAggregateInput
  _min?: Prisma.WeighingMinOrderByAggregateInput
  _sum?: Prisma.WeighingSumOrderByAggregateInput
}

export type WeighingScalarWhereWithAggregatesInput = {
  AND?: Prisma.WeighingScalarWhereWithAggregatesInput | Prisma.WeighingScalarWhereWithAggregatesInput[]
  OR?: Prisma.WeighingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WeighingScalarWhereWithAggregatesInput | Prisma.WeighingScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Weighing"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Weighing"> | Date | string
  date?: Prisma.DateTimeWithAggregatesFilter<"Weighing"> | Date | string
  weight?: Prisma.IntWithAggregatesFilter<"Weighing"> | number
  notes?: Prisma.StringNullableWithAggregatesFilter<"Weighing"> | string | null
}

export type WeighingCreateInput = {
  createdAt?: Date | string
  date?: Date | string
  weight: number
  notes?: string | null
}

export type WeighingUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  date?: Date | string
  weight: number
  notes?: string | null
}

export type WeighingUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type WeighingUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type WeighingCreateManyInput = {
  id?: number
  createdAt?: Date | string
  date?: Date | string
  weight: number
  notes?: string | null
}

export type WeighingUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type WeighingUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type WeighingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  date?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  notes?: Prisma.SortOrder
}

export type WeighingAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type WeighingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  date?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  notes?: Prisma.SortOrder
}

export type WeighingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  date?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  notes?: Prisma.SortOrder
}

export type WeighingSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}



export type WeighingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  date?: boolean
  weight?: boolean
  notes?: boolean
}, ExtArgs["result"]["weighing"]>

export type WeighingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  date?: boolean
  weight?: boolean
  notes?: boolean
}, ExtArgs["result"]["weighing"]>

export type WeighingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  date?: boolean
  weight?: boolean
  notes?: boolean
}, ExtArgs["result"]["weighing"]>

export type WeighingSelectScalar = {
  id?: boolean
  createdAt?: boolean
  date?: boolean
  weight?: boolean
  notes?: boolean
}

export type WeighingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "date" | "weight" | "notes", ExtArgs["result"]["weighing"]>

export type $WeighingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Weighing"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    date: Date
    weight: number
    notes: string | null
  }, ExtArgs["result"]["weighing"]>
  composites: {}
}

export type WeighingGetPayload<S extends boolean | null | undefined | WeighingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WeighingPayload, S>

export type WeighingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WeighingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WeighingCountAggregateInputType | true
  }

export interface WeighingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Weighing'], meta: { name: 'Weighing' } }
  /**
   * Find zero or one Weighing that matches the filter.
   * @param {WeighingFindUniqueArgs} args - Arguments to find a Weighing
   * @example
   * // Get one Weighing
   * const weighing = await prisma.weighing.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WeighingFindUniqueArgs>(args: Prisma.SelectSubset<T, WeighingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WeighingClient<runtime.Types.Result.GetResult<Prisma.$WeighingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Weighing that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WeighingFindUniqueOrThrowArgs} args - Arguments to find a Weighing
   * @example
   * // Get one Weighing
   * const weighing = await prisma.weighing.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WeighingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WeighingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WeighingClient<runtime.Types.Result.GetResult<Prisma.$WeighingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Weighing that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WeighingFindFirstArgs} args - Arguments to find a Weighing
   * @example
   * // Get one Weighing
   * const weighing = await prisma.weighing.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WeighingFindFirstArgs>(args?: Prisma.SelectSubset<T, WeighingFindFirstArgs<ExtArgs>>): Prisma.Prisma__WeighingClient<runtime.Types.Result.GetResult<Prisma.$WeighingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Weighing that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WeighingFindFirstOrThrowArgs} args - Arguments to find a Weighing
   * @example
   * // Get one Weighing
   * const weighing = await prisma.weighing.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WeighingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WeighingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WeighingClient<runtime.Types.Result.GetResult<Prisma.$WeighingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Weighings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WeighingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Weighings
   * const weighings = await prisma.weighing.findMany()
   * 
   * // Get first 10 Weighings
   * const weighings = await prisma.weighing.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const weighingWithIdOnly = await prisma.weighing.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WeighingFindManyArgs>(args?: Prisma.SelectSubset<T, WeighingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WeighingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Weighing.
   * @param {WeighingCreateArgs} args - Arguments to create a Weighing.
   * @example
   * // Create one Weighing
   * const Weighing = await prisma.weighing.create({
   *   data: {
   *     // ... data to create a Weighing
   *   }
   * })
   * 
   */
  create<T extends WeighingCreateArgs>(args: Prisma.SelectSubset<T, WeighingCreateArgs<ExtArgs>>): Prisma.Prisma__WeighingClient<runtime.Types.Result.GetResult<Prisma.$WeighingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Weighings.
   * @param {WeighingCreateManyArgs} args - Arguments to create many Weighings.
   * @example
   * // Create many Weighings
   * const weighing = await prisma.weighing.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WeighingCreateManyArgs>(args?: Prisma.SelectSubset<T, WeighingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Weighings and returns the data saved in the database.
   * @param {WeighingCreateManyAndReturnArgs} args - Arguments to create many Weighings.
   * @example
   * // Create many Weighings
   * const weighing = await prisma.weighing.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Weighings and only return the `id`
   * const weighingWithIdOnly = await prisma.weighing.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WeighingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WeighingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WeighingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Weighing.
   * @param {WeighingDeleteArgs} args - Arguments to delete one Weighing.
   * @example
   * // Delete one Weighing
   * const Weighing = await prisma.weighing.delete({
   *   where: {
   *     // ... filter to delete one Weighing
   *   }
   * })
   * 
   */
  delete<T extends WeighingDeleteArgs>(args: Prisma.SelectSubset<T, WeighingDeleteArgs<ExtArgs>>): Prisma.Prisma__WeighingClient<runtime.Types.Result.GetResult<Prisma.$WeighingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Weighing.
   * @param {WeighingUpdateArgs} args - Arguments to update one Weighing.
   * @example
   * // Update one Weighing
   * const weighing = await prisma.weighing.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WeighingUpdateArgs>(args: Prisma.SelectSubset<T, WeighingUpdateArgs<ExtArgs>>): Prisma.Prisma__WeighingClient<runtime.Types.Result.GetResult<Prisma.$WeighingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Weighings.
   * @param {WeighingDeleteManyArgs} args - Arguments to filter Weighings to delete.
   * @example
   * // Delete a few Weighings
   * const { count } = await prisma.weighing.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WeighingDeleteManyArgs>(args?: Prisma.SelectSubset<T, WeighingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Weighings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WeighingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Weighings
   * const weighing = await prisma.weighing.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WeighingUpdateManyArgs>(args: Prisma.SelectSubset<T, WeighingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Weighings and returns the data updated in the database.
   * @param {WeighingUpdateManyAndReturnArgs} args - Arguments to update many Weighings.
   * @example
   * // Update many Weighings
   * const weighing = await prisma.weighing.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Weighings and only return the `id`
   * const weighingWithIdOnly = await prisma.weighing.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WeighingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WeighingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WeighingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Weighing.
   * @param {WeighingUpsertArgs} args - Arguments to update or create a Weighing.
   * @example
   * // Update or create a Weighing
   * const weighing = await prisma.weighing.upsert({
   *   create: {
   *     // ... data to create a Weighing
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Weighing we want to update
   *   }
   * })
   */
  upsert<T extends WeighingUpsertArgs>(args: Prisma.SelectSubset<T, WeighingUpsertArgs<ExtArgs>>): Prisma.Prisma__WeighingClient<runtime.Types.Result.GetResult<Prisma.$WeighingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Weighings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WeighingCountArgs} args - Arguments to filter Weighings to count.
   * @example
   * // Count the number of Weighings
   * const count = await prisma.weighing.count({
   *   where: {
   *     // ... the filter for the Weighings we want to count
   *   }
   * })
  **/
  count<T extends WeighingCountArgs>(
    args?: Prisma.Subset<T, WeighingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WeighingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Weighing.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WeighingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WeighingAggregateArgs>(args: Prisma.Subset<T, WeighingAggregateArgs>): Prisma.PrismaPromise<GetWeighingAggregateType<T>>

  /**
   * Group by Weighing.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WeighingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WeighingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WeighingGroupByArgs['orderBy'] }
      : { orderBy?: WeighingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WeighingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeighingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Weighing model
 */
readonly fields: WeighingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Weighing.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WeighingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Weighing model
 */
export interface WeighingFieldRefs {
  readonly id: Prisma.FieldRef<"Weighing", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Weighing", 'DateTime'>
  readonly date: Prisma.FieldRef<"Weighing", 'DateTime'>
  readonly weight: Prisma.FieldRef<"Weighing", 'Int'>
  readonly notes: Prisma.FieldRef<"Weighing", 'String'>
}
    

// Custom InputTypes
/**
 * Weighing findUnique
 */
export type WeighingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Weighing
   */
  select?: Prisma.WeighingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Weighing
   */
  omit?: Prisma.WeighingOmit<ExtArgs> | null
  /**
   * Filter, which Weighing to fetch.
   */
  where: Prisma.WeighingWhereUniqueInput
}

/**
 * Weighing findUniqueOrThrow
 */
export type WeighingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Weighing
   */
  select?: Prisma.WeighingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Weighing
   */
  omit?: Prisma.WeighingOmit<ExtArgs> | null
  /**
   * Filter, which Weighing to fetch.
   */
  where: Prisma.WeighingWhereUniqueInput
}

/**
 * Weighing findFirst
 */
export type WeighingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Weighing
   */
  select?: Prisma.WeighingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Weighing
   */
  omit?: Prisma.WeighingOmit<ExtArgs> | null
  /**
   * Filter, which Weighing to fetch.
   */
  where?: Prisma.WeighingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Weighings to fetch.
   */
  orderBy?: Prisma.WeighingOrderByWithRelationInput | Prisma.WeighingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Weighings.
   */
  cursor?: Prisma.WeighingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Weighings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Weighings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Weighings.
   */
  distinct?: Prisma.WeighingScalarFieldEnum | Prisma.WeighingScalarFieldEnum[]
}

/**
 * Weighing findFirstOrThrow
 */
export type WeighingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Weighing
   */
  select?: Prisma.WeighingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Weighing
   */
  omit?: Prisma.WeighingOmit<ExtArgs> | null
  /**
   * Filter, which Weighing to fetch.
   */
  where?: Prisma.WeighingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Weighings to fetch.
   */
  orderBy?: Prisma.WeighingOrderByWithRelationInput | Prisma.WeighingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Weighings.
   */
  cursor?: Prisma.WeighingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Weighings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Weighings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Weighings.
   */
  distinct?: Prisma.WeighingScalarFieldEnum | Prisma.WeighingScalarFieldEnum[]
}

/**
 * Weighing findMany
 */
export type WeighingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Weighing
   */
  select?: Prisma.WeighingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Weighing
   */
  omit?: Prisma.WeighingOmit<ExtArgs> | null
  /**
   * Filter, which Weighings to fetch.
   */
  where?: Prisma.WeighingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Weighings to fetch.
   */
  orderBy?: Prisma.WeighingOrderByWithRelationInput | Prisma.WeighingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Weighings.
   */
  cursor?: Prisma.WeighingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Weighings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Weighings.
   */
  skip?: number
  distinct?: Prisma.WeighingScalarFieldEnum | Prisma.WeighingScalarFieldEnum[]
}

/**
 * Weighing create
 */
export type WeighingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Weighing
   */
  select?: Prisma.WeighingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Weighing
   */
  omit?: Prisma.WeighingOmit<ExtArgs> | null
  /**
   * The data needed to create a Weighing.
   */
  data: Prisma.XOR<Prisma.WeighingCreateInput, Prisma.WeighingUncheckedCreateInput>
}

/**
 * Weighing createMany
 */
export type WeighingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Weighings.
   */
  data: Prisma.WeighingCreateManyInput | Prisma.WeighingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Weighing createManyAndReturn
 */
export type WeighingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Weighing
   */
  select?: Prisma.WeighingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Weighing
   */
  omit?: Prisma.WeighingOmit<ExtArgs> | null
  /**
   * The data used to create many Weighings.
   */
  data: Prisma.WeighingCreateManyInput | Prisma.WeighingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Weighing update
 */
export type WeighingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Weighing
   */
  select?: Prisma.WeighingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Weighing
   */
  omit?: Prisma.WeighingOmit<ExtArgs> | null
  /**
   * The data needed to update a Weighing.
   */
  data: Prisma.XOR<Prisma.WeighingUpdateInput, Prisma.WeighingUncheckedUpdateInput>
  /**
   * Choose, which Weighing to update.
   */
  where: Prisma.WeighingWhereUniqueInput
}

/**
 * Weighing updateMany
 */
export type WeighingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Weighings.
   */
  data: Prisma.XOR<Prisma.WeighingUpdateManyMutationInput, Prisma.WeighingUncheckedUpdateManyInput>
  /**
   * Filter which Weighings to update
   */
  where?: Prisma.WeighingWhereInput
  /**
   * Limit how many Weighings to update.
   */
  limit?: number
}

/**
 * Weighing updateManyAndReturn
 */
export type WeighingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Weighing
   */
  select?: Prisma.WeighingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Weighing
   */
  omit?: Prisma.WeighingOmit<ExtArgs> | null
  /**
   * The data used to update Weighings.
   */
  data: Prisma.XOR<Prisma.WeighingUpdateManyMutationInput, Prisma.WeighingUncheckedUpdateManyInput>
  /**
   * Filter which Weighings to update
   */
  where?: Prisma.WeighingWhereInput
  /**
   * Limit how many Weighings to update.
   */
  limit?: number
}

/**
 * Weighing upsert
 */
export type WeighingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Weighing
   */
  select?: Prisma.WeighingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Weighing
   */
  omit?: Prisma.WeighingOmit<ExtArgs> | null
  /**
   * The filter to search for the Weighing to update in case it exists.
   */
  where: Prisma.WeighingWhereUniqueInput
  /**
   * In case the Weighing found by the `where` argument doesn't exist, create a new Weighing with this data.
   */
  create: Prisma.XOR<Prisma.WeighingCreateInput, Prisma.WeighingUncheckedCreateInput>
  /**
   * In case the Weighing was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WeighingUpdateInput, Prisma.WeighingUncheckedUpdateInput>
}

/**
 * Weighing delete
 */
export type WeighingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Weighing
   */
  select?: Prisma.WeighingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Weighing
   */
  omit?: Prisma.WeighingOmit<ExtArgs> | null
  /**
   * Filter which Weighing to delete.
   */
  where: Prisma.WeighingWhereUniqueInput
}

/**
 * Weighing deleteMany
 */
export type WeighingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Weighings to delete
   */
  where?: Prisma.WeighingWhereInput
  /**
   * Limit how many Weighings to delete.
   */
  limit?: number
}

/**
 * Weighing without action
 */
export type WeighingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Weighing
   */
  select?: Prisma.WeighingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Weighing
   */
  omit?: Prisma.WeighingOmit<ExtArgs> | null
}
